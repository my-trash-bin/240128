enum UserRole {
  NONE
  SELLER
  SUPER_SELLER
  ADMIN
}

model User {
  id             Int      @id @default(autoincrement())
  role           UserRole
  createdAt      DateTime @default(now())
  passwordHash   String // hash(userId, password)
  nickname       String   @unique
  introductionId Int?     @unique
  profileImageId Int?

  // user relationships
  relationsSmaller          UserRelation[]              @relation("UserRelation_smaller")
  relationsBigger           UserRelation[]              @relation("UserRelation_bigger")
  relationCacheFrom         UserRelationCacheByUser[]   @relation("UserRelationCacheByUser_from")
  relationCacheTo           UserRelationCacheByUser[]   @relation("UserRelationCacheByUser_to")
  relationFriendRequestFrom UserRelationFriendRequest[] @relation("UserRelationFriendRequest_from")
  relationFriendRequestTo   UserRelationFriendRequest[] @relation("UserRelationFriendRequest_to")
  following                 UserFollow[]                @relation("UserFollow_from")
  followed                  UserFollow[]                @relation("UserFollow_to")

  // other 1:n
  passwordHistory           UserPasswordHistory[]
  email                     UserEmail[]
  ownedGroups               Group[]
  groups                    GroupUser[]
  documentEditHistory       DocumentEditHistory[]
  userPasswordResetRequests UserPasswordResetRequest[]
  transactions              Transaction[]
  inventoryItems            UserInventoryItem[]
  uploadedPublicFiles       PublicFile[]               @relation("PublicFile_uploadedUser")
  uploadedPrivateFiles      PrivateFile[]
  inquiries                 ProductInquiry[]
  memberInquiries           MemberReport[]
  returns                   Return[]
  cartItems                 CartItem[]
  wishlistItems             WishlistItem[]
  oauth                     OAuth[]
  loginHistory              UserLoginHistory[]

  // 1:1
  member       Member?
  introduction Document?   @relation(fields: [introductionId], references: [id])
  profileImage PublicFile? @relation("User_profileImage", fields: [profileImageId], references: [id])
}

model UserRelation {
  id                  Int       @id @default(autoincrement())
  userIdSmaller       Int
  userIdBigger        Int
  createdAt           DateTime  @default(now())
  friendshipStartedAt DateTime?

  smaller User @relation("UserRelation_smaller", fields: [userIdSmaller], references: [id])
  bigger  User @relation("UserRelation_bigger", fields: [userIdBigger], references: [id])

  byUser UserRelationCacheByUser[]
  chat   Subject?
}

model UserRelationCacheByUser {
  // 2 rows for each UserRelation row
  fromId     Int
  toId       Int
  relationId Int

  friendshipStartedAtCache DateTime? // relation::friendshipStartedAt
  isFriendCache            Boolean // !!friendshipStartedAt
  createdAtCache           DateTime // relation::createdAt

  from     User         @relation("UserRelationCacheByUser_from", fields: [fromId], references: [id])
  to       User         @relation("UserRelationCacheByUser_to", fields: [toId], references: [id])
  relation UserRelation @relation(fields: [relationId], references: [id])

  @@id([fromId, toId])
  @@index([fromId, isFriendCache, friendshipStartedAtCache])
  @@index([fromId, isFriendCache, createdAtCache])
}

model UserRelationFriendRequest {
  fromId           Int
  toId             Int
  documentId       Int      @unique
  createdAt        DateTime @default(now())
  isCancelled      Boolean
  isRejected       Boolean
  isAvailableCache Boolean // !isCancelled && !isRejected

  from     User     @relation("UserRelationFriendRequest_from", fields: [fromId], references: [id])
  to       User     @relation("UserRelationFriendRequest_to", fields: [toId], references: [id])
  document Document @relation(fields: [documentId], references: [id])

  @@id([fromId, toId])
  @@index([fromId, createdAt])
  @@index([toId, createdAt])
  @@index([fromId, isAvailableCache, createdAt])
  @@index([toId, isAvailableCache, createdAt])
}

model UserFollow {
  fromId    Int
  toId      Int
  createdAt DateTime @default(now())

  from User @relation("UserFollow_from", fields: [fromId], references: [id])
  to   User @relation("UserFollow_to", fields: [toId], references: [id])

  @@id([fromId, toId])
  @@index([fromId, createdAt])
  @@index([toId, createdAt])
}

enum OAuthProvider {
  NAVER
  KAKAO
}

model OAuth {
  id       Int           @id @default(autoincrement())
  provider OAuthProvider
  oauthId  String
  parentId Int?

  parent       User?              @relation(fields: [parentId], references: [id])
  loginHistory UserLoginHistory[]

  @@unique([provider, oauthId])
}

model UserPasswordResetRequest {
  userId       Int
  email        String
  createdAt    DateTime
  expiresAt    DateTime
  passwordHash String
  resetAt      DateTime?
  cancelledAt  DateTime?
  isValidCache Boolean // resetAt === null && cancelledAt === null

  user User @relation(fields: [userId], references: [id])

  @@id([userId, createdAt])
  @@index([userId, isValidCache, createdAt])
}

model UserLoginHistory {
  parentId  Int
  createdAt DateTime @default(now())
  succeed   Boolean
  ipAddress String
  oauthId   Int?

  parent User @relation(fields: [parentId], references: [id])

  oauth OAuth? @relation(fields: [oauthId], references: [id])

  @@id([parentId, createdAt])
}

model UserPasswordHistory {
  // To prevent user set password previously used
  userId       Int
  passwordHash String // hash(userId, password)

  user User @relation(fields: [userId], references: [id])

  @@id([userId, passwordHash])
}

model UserEmail {
  email        String   @id
  userId       Int?
  blockedCache Boolean // true if userId is null
  createdAt    DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@index([blockedCache, email])
}

model PopupNotice {
  id        Int      @id @default(autoincrement())
  contentJs String // evaluated to function returning React Component
  createdAt DateTime @default(now())
  startAt   DateTime
  endAt     DateTime
}

model UserNotification {
  id          Int       @id @default(autoincrement())
  userId      Int
  documentId  Int?
  createdAt   DateTime  @default(now())
  readAt      DateTime?
  isReadCache Boolean // !!readAt

  document Document? @relation(fields: [documentId], references: [id])

  @@index([userId, createdAt])
  @@index([userId, isReadCache, createdAt])
}

model Group {
  id             Int    @id @default(autoincrement())
  name           String @unique
  ownerId        Int
  introductionId Int?   @unique
  profileImageId Int?

  owner        User        @relation(fields: [ownerId], references: [id])
  introduction Document?   @relation(fields: [introductionId], references: [id])
  profileImage PublicFile? @relation(fields: [profileImageId], references: [id])

  member   Member?
  users    GroupUser[]
  auditLog GroupAuditLog[]
}

model GroupUser {
  groupId Int
  userId  Int

  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@id([groupId, userId])
}

model GroupAuditLog {
  id        Int      @id @default(autoincrement())
  groupId   Int
  createdAt DateTime @default(now())
  logType   Int
  logJson   String

  group Group @relation(fields: [groupId], references: [id])

  @@index([groupId, createdAt])
  @@index([groupId, logType, createdAt])
}

enum MemberType {
  USER
  GROUP
}

model Member {
  id   Int        @id @default(autoincrement())
  type MemberType

  userId  Int? @unique // null if system
  groupId Int? @unique // null if not as group member

  user  User?  @relation(fields: [userId], references: [id])
  group Group? @relation(fields: [groupId], references: [id])

  comment                   Subject?
  ownedFiles                PublicFile[]
  ownedDocuments            Document[]
  editedDocuments           DocumentEditHistory[]
  ownedProducts             Product[]
  ownedDigitalProductSeries DigitalProductSeries[]
  ownedProductDrafts        ProductDraft[]
  reports                   MemberReport[]
}

model PublicFile {
  // When upload:
  // 1. create File with referenceCount = 0
  // 2. upload to its ObjectStorage
  // 3. reference File and increase referenceCount at once
  // When collect garbage: delete rows with zero-referenceCount and old enough
  id             Int      @id @default(autoincrement())
  name           String
  providerAndId  String
  referenceCount Int
  ownerId        Int
  uploadedUserId Int
  markAsDeleted  Boolean
  createdAt      DateTime @default(now())

  owner        Member @relation(fields: [ownerId], references: [id])
  uploadedUser User   @relation("PublicFile_uploadedUser", fields: [uploadedUserId], references: [id])

  users         User[]                    @relation("User_profileImage")
  groupProfiles Group[]
  documents     DocumentEditHistoryFile[]

  @@index([referenceCount, createdAt])
}

model PrivateFile {
  // Similar to PublicFile, but for digital product content only.
  id                Int      @id @default(autoincrement())
  name              String
  providerAndId     String
  markAsDeleted     Boolean
  createdAt         DateTime @default(now())
  productDraftId    Int
  productSnapshotId Int?
  productId         Int?
  uploadedUserId    Int

  productDraft    ProductDraftDigital     @relation(fields: [productDraftId], references: [id])
  productSnapshot ProductSnapshotDigital? @relation(fields: [productId], references: [id])
  product         ProductDigital?         @relation(fields: [productId], references: [id])
  uploadedUser    User                    @relation(fields: [uploadedUserId], references: [id])
}

model Document {
  id            Int      @id @default(autoincrement())
  ownerId       Int? // null if no member has write permission
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastTimeCache DateTime @unique // SELECT MAX(createdAt) FROM DodumentEditHistory WHERE documentId = ${id}

  owner       Member?             @relation(fields: [ownerId], references: [id])
  lastVersion DocumentEditHistory @relation(fields: [id, createdAt], references: [documentId, createdAt])

  userIntroduction                         User?
  userRelationFriendRequest                UserRelationFriendRequest?
  groupIntroduction                        Group?
  review                                   Review?
  productDescription                       Product?
  productPhysicalAddonDetails              ProductPhysicalAddon?
  productPhysicalSelectDetails             ProductPhysicalSelect?
  productPhysicalSelectItemDetails         ProductPhysicalSelectItem?
  productPhysicalOptionDetails             ProductPhysicalOption?
  productDigitalItemDetails                ProductDigitalItem?
  productDraftDescription                  ProductDraft?
  productDraftPhysicalAddonDetails         ProductDraftPhysicalAddon?
  productDraftPhysicalSelectDetails        ProductDraftPhysicalSelect?
  productDraftPhysicalSelectItemDetails    ProductDraftPhysicalSelectItem?
  productDraftPhysicalOptionDetails        ProductDraftPhysicalOption?
  productDraftDigitalItemDetails           ProductDraftDigitalItem?
  productSnapshotDescription               ProductSnapshot?
  productSnapshotPhysicalAddonDetails      ProductSnapshotPhysicalAddon?
  productSnapshotPhysicalSelectDetails     ProductSnapshotPhysicalSelect?
  productSnapshotPhysicalSelectItemDetails ProductSnapshotPhysicalSelectItem?
  productSnapshotPhysicalOptionSnapshot    ProductSnapshotPhysicalOption?
  productSnapshotDigitalItemDetails        ProductSnapshotDigitalItem?
  subjectdocument                          SubjectDocument?
  physicalProductCategory                  PhysicalProductCategory?
  digitalProductCategory                   DigitalProductCategory?

  userNotification UserNotification[]

  @@unique([id, createdAt])
}

model DocumentEditHistory {
  documentId    Int
  createdAt     DateTime @default(now())
  title         String?
  contentCustom String // markdown, bbcode or json, custom format
  memberId      Int
  userId        Int

  parent Document?

  member Member @relation(fields: [memberId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  files DocumentEditHistoryFile[]

  @@id([documentId, createdAt])
}

model DocumentEditHistoryFile {
  documentEditHistoryId Int
  fileId                Int
  createdAt             DateTime @default(now())

  history DocumentEditHistory @relation(fields: [documentEditHistoryId, createdAt], references: [documentId, createdAt])
  file    PublicFile          @relation(fields: [fileId], references: [id])

  @@id([documentEditHistoryId, fileId])
}

enum ProductType {
  PHYSICAL
  PHYSICAL_ADDON
  DIGITAL
}

model Product {
  id                Int         @id @default(autoincrement())
  type              ProductType
  descriptionId     Int         @unique
  ownerIdCache      Int // draft::ownerId
  visibilityByOwner Boolean
  visibilityByAdmin Boolean
  visibilityCache   Boolean // visibilityByOwner && visibilityByAdmin

  physicalId      Int? @unique
  physicalAddonId Int? @unique
  digitalId       Int? @unique

  description Document @relation(fields: [descriptionId], references: [id])
  ownerCache  Member   @relation(fields: [ownerIdCache], references: [id])

  physical      ProductPhysical?      @relation(fields: [physicalId], references: [id])
  physicalAddon ProductPhysicalAddon? @relation(fields: [physicalAddonId], references: [id])
  digital       ProductDigital?       @relation(fields: [digitalId], references: [id])

  comment   Subject?
  inquiries ProductInquiry[]
  reviews   Review[]

  draft ProductDraft?
}

model ProductPhysical {
  // user can buy same physical product multiple times
  id            Int     @id @default(autoincrement())
  price         Int
  categoryId    Int
  stockQuantity Int?
  quantityLimit Int?
  inStockCache  Boolean // !!stockQuantity

  super Product?

  category PhysicalProductCategory @relation(fields: [categoryId], references: [id])

  addons             ProductPhysicalAddon[]
  selects            ProductPhysicalSelect[]
  options            ProductPhysicalOption[]
  transactions       TransactionBuyItemPhysicalItem[]
  userInventoryItems UserInventoryItemOriginal[]
  cartItems          CartItemPhysical[]
  wishlistItems      WishlistItemPhysical[]

  draft ProductDraftPhysical?
}

model ProductPhysicalAddon {
  id                  Int     @id @default(autoincrement())
  parentId            Int
  price               Int
  enabled             Boolean
  stockQuantity       Int?
  quantityLimit       Int?
  allowedCountPerItem Int?
  name                String
  detailsId           Int?    @unique

  super  Product?
  parent ProductPhysical @relation(fields: [parentId], references: [id])

  details Document? @relation(fields: [detailsId], references: [id])

  transactions       TransactionBuyItemPhysicalItem[]
  userInventoryItems UserInventoryItemAddon[]
  cartItems          CartItemPhysicalAddon[]
  wishlistItems      WishlistItemPhysicalAddon[]

  draft ProductDraftPhysicalAddon?
}

model ProductPhysicalSelect {
  id            Int     @id @default(autoincrement())
  parentId      Int
  enabled       Boolean
  name          String
  detailsId     Int?    @unique
  defaultItemId Int?    @unique

  parent ProductPhysical @relation(fields: [parentId], references: [id])

  details     Document?                   @relation(fields: [detailsId], references: [id])
  defaultItem ProductPhysicalSelectItem?  @relation("PhysicalProductSelect_defaultItem", fields: [defaultItemId], references: [id])
  items       ProductPhysicalSelectItem[] @relation("PhysicalProductSelectItem_parent")

  wishlistItems WishlistItemPhysicalSelectItem[]

  draft ProductDraftPhysicalSelect?

  @@index([parentId, enabled, name])
}

model ProductPhysicalSelectItem {
  id              Int     @id @default(autoincrement())
  parentId        Int
  additionalPrice Int
  enabled         Boolean
  name            String
  detailsId       Int?    @unique

  parent ProductPhysicalSelect @relation("PhysicalProductSelectItem_parent", fields: [parentId], references: [id])

  default ProductPhysicalSelect? @relation("PhysicalProductSelect_defaultItem")
  details Document?              @relation(fields: [detailsId], references: [id])

  transactions       TransactionBuyItemPhysicalItem[]
  userInventoryItems UserInventoryItemOriginalSelectItem[]
  cartItems          CartItemPhysicalSelectItem[]

  wishlistItems WishlistItemPhysicalSelectItem[]

  draft ProductDraftPhysicalSelectItem?

  @@index([parentId, enabled, name])
}

model ProductPhysicalOption {
  id              Int     @id @default(autoincrement())
  parentId        Int
  additionalPrice Int
  enabled         Boolean
  name            String
  detailsId       Int?    @unique
  valueTypeJson   String

  parent ProductPhysical @relation(fields: [parentId], references: [id])

  details Document? @relation(fields: [detailsId], references: [id])

  transactions       TransactionBuyItemPhysicalItem[]
  userInventoryItems UserInventoryItemOriginalOption[]
  cartItems          CartItemPhysicalOption[]
  wishlistItems      WishlistItemPhysicalOption[]

  draft ProductDraftPhysicalOption?
}

model ProductDigital {
  // user can buy same digital product multiple times to extend validity
  id           Int    @id @default(autoincrement())
  metadataJson String
  categoryId   Int
  seriesId     Int?

  super Product?

  category DigitalProductCategory @relation(fields: [categoryId], references: [id])
  series   DigitalProductSeries?  @relation(fields: [seriesId], references: [id])

  items ProductDigitalItem[]
  files PrivateFile[]

  draft ProductDraftDigital?

  cartItems     CartItemDigital[]
  wishlistItems WishlistItemDigital[]
}

model ProductDigitalItem {
  id               Int     @id @default(autoincrement())
  parentId         Int
  price            Int
  name             String?
  detailsId        Int?    @unique
  stockQuantity    Int?
  validityDuration Int? // how long user can view the content, null if infinity

  parent  ProductDigital @relation(fields: [parentId], references: [id])
  details Document?      @relation(fields: [detailsId], references: [id])

  transactions TransactionBuyItemDigital[]
  cartItems    CartItemDigital[]

  draft ProductDraftDigitalItem?

  @@unique([parentId, validityDuration])
}

model DigitalProductSeries {
  id      Int    @id @default(autoincrement())
  name    String @unique
  ownerId Int

  owner Member           @relation(fields: [ownerId], references: [id])
  items ProductDigital[]
}

model Review {
  id             Int @id @default(autoincrement())
  documentId     Int @unique
  productIdCache Int // transaction::parent::super::id

  transaction TransactionBuyItem?
  product     Product             @relation(fields: [productIdCache], references: [id])
  document    Document            @relation(fields: [documentId], references: [id])
}

model ProductDraft {
  id                Int         @id @default(autoincrement())
  type              ProductType
  descriptionId     Int         @unique
  ownerId           Int
  reviewRequestedAt DateTime?

  physicalDraftId      Int? @unique
  physicalAddonDraftId Int? @unique
  digitalDraftId       Int? @unique

  publishedId Int? @unique

  owner       Member   @relation(fields: [ownerId], references: [id])
  description Document @relation(fields: [descriptionId], references: [id])

  physicalDraft      ProductDraftPhysical?      @relation(fields: [physicalDraftId], references: [id])
  physicalAddonDraft ProductDraftPhysicalAddon? @relation(fields: [physicalAddonDraftId], references: [id])
  digitalDraft       ProductDraftDigital?       @relation(fields: [digitalDraftId], references: [id])

  published Product? @relation(fields: [publishedId], references: [id])
  inquiry   Subject?

  @@index([reviewRequestedAt])
}

model ProductDraftPhysical {
  id            Int  @id @default(autoincrement())
  price         Int
  quantityLimit Int?
  categoryId    Int?

  publishedId Int @unique

  super ProductDraft?

  category PhysicalProductCategory? @relation(fields: [categoryId], references: [id])

  addons  ProductDraftPhysicalAddon[]
  selects ProductDraftPhysicalSelect[]
  options ProductDraftPhysicalOption[]

  published ProductPhysical? @relation(fields: [publishedId], references: [id])
}

model ProductDraftPhysicalAddon {
  id                  Int     @id @default(autoincrement())
  parentId            Int
  price               Int
  enabled             Boolean
  allowedCountPerItem Int?
  name                String
  detailsId           Int?    @unique

  publishedId Int? @unique

  super  ProductDraft?
  parent ProductDraftPhysical @relation(fields: [parentId], references: [id])

  details Document? @relation(fields: [detailsId], references: [id])

  published ProductPhysicalAddon? @relation(fields: [publishedId], references: [id])
}

model ProductDraftPhysicalSelect {
  id            Int    @id @default(autoincrement())
  parentId      Int
  name          String
  detailsId     Int?   @unique
  defaultItemId Int?   @unique

  publishedId Int @unique

  parent      ProductDraftPhysical             @relation(fields: [parentId], references: [id])
  details     Document?                        @relation(fields: [detailsId], references: [id])
  defaultItem ProductDraftPhysicalSelectItem?  @relation("PhysicalProductSelect_defaultItem", fields: [defaultItemId], references: [id])
  items       ProductDraftPhysicalSelectItem[] @relation("PhysicalProductSelectItem_parent")

  published ProductPhysicalSelect? @relation(fields: [publishedId], references: [id])
}

model ProductDraftPhysicalSelectItem {
  id              Int     @id @default(autoincrement())
  parentId        Int
  additionalPrice Int
  enabled         Boolean
  name            String
  detailsId       Int?    @unique

  publishedId Int? @unique

  parent  ProductDraftPhysicalSelect  @relation("PhysicalProductSelectItem_parent", fields: [parentId], references: [id])
  default ProductDraftPhysicalSelect? @relation("PhysicalProductSelect_defaultItem")
  details Document?                   @relation(fields: [detailsId], references: [id])

  published ProductPhysicalSelectItem? @relation(fields: [publishedId], references: [id])

  @@index([parentId, enabled, name])
}

model ProductDraftPhysicalOption {
  id              Int     @id @default(autoincrement())
  parentId        Int
  additionalPrice Int
  enabled         Boolean
  name            String
  detailsId       Int?    @unique
  valueTypeJson   String

  publishedId Int? @unique

  parent  ProductDraftPhysical @relation(fields: [parentId], references: [id])
  details Document?            @relation(fields: [detailsId], references: [id])

  published ProductPhysicalOption? @relation(fields: [publishedId], references: [id])
}

model ProductDraftDigital {
  id           Int    @id @default(autoincrement())
  metadataJson String
  categoryId   Int?

  publishedId Int? @unique

  super ProductDraft?

  category DigitalProductCategory? @relation(fields: [categoryId], references: [id])

  items ProductDraftDigitalItem[]
  files PrivateFile[]

  published ProductDigital? @relation(fields: [publishedId], references: [id])
}

model ProductDraftDigitalItem {
  id               Int     @id @default(autoincrement())
  parentId         Int
  price            Int
  enabled          Boolean
  name             String?
  detailsId        Int?    @unique
  validityDuration Int? // how long user can view the content, null if infinity

  publishedId Int? @unique

  parent  ProductDraftDigital @relation(fields: [parentId], references: [id])
  details Document?           @relation(fields: [detailsId], references: [id])

  published ProductDigitalItem? @relation(fields: [publishedId], references: [id])
}

model ProductSnapshot {
  id            Int         @id @default(autoincrement())
  type          ProductType
  descriptionId Int         @unique

  physicalId      Int? @unique
  physicalAddonId Int? @unique
  digitalId       Int? @unique

  description Document @relation(fields: [descriptionId], references: [id])

  physical      ProductSnapshotPhysical?      @relation(fields: [physicalId], references: [id])
  physicalAddon ProductSnapshotPhysicalAddon? @relation(fields: [physicalAddonId], references: [id])
  digital       ProductSnapshotDigital?       @relation(fields: [digitalId], references: [id])
}

model ProductSnapshotPhysical {
  id            Int  @id @default(autoincrement())
  price         Int
  quantityLimit Int?
  categoryId    Int

  super ProductSnapshot?

  category PhysicalProductCategory @relation(fields: [categoryId], references: [id])

  addons  ProductSnapshotPhysicalAddon[]
  selects ProductSnapshotPhysicalSelect[]
  options ProductSnapshotPhysicalOption[]
}

model ProductSnapshotPhysicalAddon {
  id                  Int    @id @default(autoincrement())
  parentId            Int
  price               Int
  quantityLimit       Int?
  allowedCountPerItem Int?
  name                String
  detailsId           Int?   @unique

  super  ProductSnapshot?
  parent ProductSnapshotPhysical @relation(fields: [parentId], references: [id])

  details Document? @relation(fields: [detailsId], references: [id])
}

model ProductSnapshotPhysicalSelect {
  id            Int     @id @default(autoincrement())
  parentId      Int
  enabled       Boolean
  name          String
  detailsId     Int?    @unique
  defaultItemId Int?    @unique

  parent ProductSnapshotPhysical @relation(fields: [parentId], references: [id])

  details Document? @relation(fields: [detailsId], references: [id])

  defaultItem ProductSnapshotPhysicalSelectItem?  @relation("PhysicalProductSelectSnapshot_defaultItem", fields: [defaultItemId], references: [id])
  items       ProductSnapshotPhysicalSelectItem[] @relation("PhysicalProductSelectItemSnapshot_parent")
}

model ProductSnapshotPhysicalSelectItem {
  id              Int     @id @default(autoincrement())
  parentId        Int
  additionalPrice Int
  enabled         Boolean
  name            String
  detailsId       Int?    @unique

  parent ProductSnapshotPhysicalSelect @relation("PhysicalProductSelectItemSnapshot_parent", fields: [parentId], references: [id])

  default ProductSnapshotPhysicalSelect? @relation("PhysicalProductSelectSnapshot_defaultItem")
  details Document?                      @relation(fields: [detailsId], references: [id])
}

model ProductSnapshotPhysicalOption {
  id              Int     @id @default(autoincrement())
  parentId        Int
  additionalPrice Int
  enabled         Boolean
  name            String
  detailsId       Int?    @unique
  valueTypeJson   String

  parent ProductSnapshotPhysical @relation(fields: [parentId], references: [id])

  details Document? @relation(fields: [detailsId], references: [id])
}

model ProductSnapshotDigital {
  id           Int    @id @default(autoincrement())
  metadataJson String
  categoryId   Int

  super ProductSnapshot?

  category DigitalProductCategory @relation(fields: [categoryId], references: [id])

  items ProductSnapshotDigitalItem[]
  files PrivateFile[]
}

model ProductSnapshotDigitalItem {
  id               Int     @id @default(autoincrement())
  parentId         Int
  price            Int
  name             String?
  detailsId        Int?    @unique
  validityDuration Int? // how long user can view the content, null if infinity

  parent  ProductSnapshotDigital @relation(fields: [parentId], references: [id])
  details Document?              @relation(fields: [detailsId], references: [id])
}

enum UserInventoryItemType {
  ORIGINAL
  ADDON
}

model UserInventoryItem {
  id              Int                   @id @default(autoincrement())
  type            UserInventoryItemType
  userId          Int
  createdAt       DateTime              @default(now())
  memo            String?
  nameCache       String // memo ?? (concrete)::product::name
  transactionId   Int
  usedAt          DateTime?
  removedAt       DateTime?
  isRemovedCache  Boolean // !!removedAt
  isReturnedCache Boolean // !!return
  returnedAtCache DateTime? // return::createdAt

  originalId Int? @unique
  addonId    Int? @unique

  user        User                           @relation(fields: [userId], references: [id])
  transaction TransactionBuyItemPhysicalItem @relation(fields: [transactionId], references: [id])

  original UserInventoryItemOriginal? @relation(fields: [originalId], references: [id])
  addon    UserInventoryItemAddon?    @relation(fields: [addonId], references: [id])

  return Return?

  @@index([userId, isRemovedCache, createdAt])
  @@index([userId, isRemovedCache, removedAt])
}

model UserInventoryItemOriginal {
  id     Int @id @default(autoincrement())
  itemId Int

  super       UserInventoryItem?
  item        ProductPhysical                       @relation(fields: [itemId], references: [id])
  selectItems UserInventoryItemOriginalSelectItem[]
  options     UserInventoryItemOriginalOption[]
}

model UserInventoryItemOriginalSelectItem {
  id       Int @id @default(autoincrement())
  parentId Int
  itemId   Int

  parent UserInventoryItemOriginal @relation(fields: [parentId], references: [id])
  item   ProductPhysicalSelectItem @relation(fields: [itemId], references: [id])
}

model UserInventoryItemOriginalOption {
  id        Int    @id @default(autoincrement())
  parentId  Int
  optionId  Int
  valueJson String

  parent UserInventoryItemOriginal @relation(fields: [parentId], references: [id])
  option ProductPhysicalOption     @relation(fields: [optionId], references: [id])
}

model UserInventoryItemAddon {
  id     Int @id @default(autoincrement())
  itemId Int

  super UserInventoryItem?
  item  ProductPhysicalAddon @relation(fields: [itemId], references: [id])
}

model UserDigitalProduct {
  id        Int       @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  items UserDigitalProductItem[]
}

model UserDigitalProductItem {
  userDigitalProductId Int
  createdAt            DateTime  @default(now())
  transactionId        Int       @unique
  startAt              DateTime?

  userDigitalProduct UserDigitalProduct        @relation(fields: [userDigitalProductId], references: [id])
  transaction        TransactionBuyItemDigital @relation(fields: [transactionId], references: [id])

  @@id([userDigitalProductId, createdAt])
}

enum TransactionType {
  CHARGE_CREDIT
  BUY
  REFUND
  SETTLE_SALES
  CASH_OUT_CREDIT
}

model Transaction {
  id                   Int             @id @default(autoincrement())
  type                 TransactionType
  userId               Int
  createdAt            DateTime        @default(now())
  userCreditBefore     Int
  userCreditAfterCache Int

  buyId           Int? @unique
  chargeCreditId  Int? @unique
  refundId        Int? @unique
  settleSalesId   Int? @unique
  cashOutCreditId Int? @unique

  user User @relation(fields: [userId], references: [id])

  buy           TransactionBuy?           @relation(fields: [buyId], references: [id])
  chargeCredit  TransactionChargeCredit?  @relation(fields: [chargeCreditId], references: [id])
  refund        TransactionRefund?        @relation(fields: [refundId], references: [id])
  settleSales   TransactionSettleSales?   @relation(fields: [settleSalesId], references: [id])
  cashOutCredit TransactionCashOutCredit? @relation(fields: [cashOutCreditId], references: [id])

  @@index([userId, createdAt])
  @@index([userId, type, createdAt])
}

model TransactionChargeCredit {
  id          Int @id @default(autoincrement())
  creditCount Int

  super Transaction?
}

model TransactionBuy {
  id                    Int                  @id @default(autoincrement())
  items                 TransactionBuyItem[]
  priceSumCacheSnapshot Int
  refundedCredit        Int

  super Transaction?
}

model TransactionBuyItem {
  id                    Int         @id @default(autoincrement())
  type                  ProductType
  parentId              Int
  priceSumCacheSnapshot Int
  reviewId              Int?        @unique

  physicalId Int? @unique
  digitalId  Int? @unique

  physical TransactionBuyItemPhysical? @relation(fields: [physicalId], references: [id])
  digital  TransactionBuyItemDigital?  @relation(fields: [digitalId], references: [id])

  parent TransactionBuy @relation(fields: [parentId], references: [id])

  review Review? @relation(fields: [reviewId], references: [id])

  refundTransactions TransactionRefund[]
  settleSalesItem    TransactionSettleSalesItem?
}

model TransactionBuyItemPhysical {
  id Int @id @default(autoincrement())

  super TransactionBuyItem?
  items TransactionBuyItemPhysicalItem[]
}

enum TransactionBuyItemPhysicalItemType {
  ORIGINAL
  ADDON
  SELECT_ITEM
  OPTION
}

model TransactionBuyItemPhysicalItem {
  id                     Int                                @id @default(autoincrement())
  parentId               Int
  type                   TransactionBuyItemPhysicalItemType
  pricePerCountSnapshot  Int
  count                  Int
  refundedCount          Int
  valueJson              String? // required on option
  confirmedAt            DateTime?
  confirmedAutomatically Boolean                            @default(false)

  originalId   Int?
  addonId      Int?
  selectItemId Int?
  optionId     Int?

  parent TransactionBuyItemPhysical @relation(fields: [parentId], references: [id])

  original   ProductPhysical?           @relation(fields: [originalId], references: [id])
  addon      ProductPhysicalAddon?      @relation(fields: [addonId], references: [id])
  selectItem ProductPhysicalSelectItem? @relation(fields: [selectItemId], references: [id])
  option     ProductPhysicalOption?     @relation(fields: [optionId], references: [id])

  userInventoryItems UserInventoryItem[]
}

model TransactionBuyItemDigital {
  id                       Int  @id @default(autoincrement())
  itemId                   Int
  priceSnapshot            Int // item::price
  validityDurationSnapshot Int? // item::validityDuration

  super TransactionBuyItem?
  item  ProductDigitalItem  @relation(fields: [itemId], references: [id])

  userDigitalProductItem UserDigitalProductItem?
}

model TransactionRefund {
  id             Int      @id @default(autoincrement())
  refundedCredit Int
  refundedAt     DateTime
  remainCredit   Int
  itemId         Int

  super Transaction?

  buyTransaction TransactionBuyItem @relation(fields: [itemId], references: [id])
  return         Return? // required
}

model TransactionSettleSales {
  id                  Int                          @id @default(autoincrement())
  items               TransactionSettleSalesItem[]
  creditCountSumCache Int

  super Transaction?
}

model TransactionSettleSalesItem {
  id          Int @id @default(autoincrement())
  parentId    Int
  itemId      Int @unique
  creditCount Int

  parent TransactionSettleSales @relation(fields: [parentId], references: [id])
  item   TransactionBuyItem     @relation(fields: [itemId], references: [id])
}

model TransactionCashOutCredit {
  id          Int @id @default(autoincrement())
  creditCount Int

  super Transaction?
}

model PhysicalProductCategory {
  id         Int  @id @default(autoincrement())
  parentId   Int?
  documentId Int  @unique

  parent   PhysicalProductCategory? @relation("PhysicalProductCategory_parent", fields: [parentId], references: [id])
  document Document                 @relation(fields: [documentId], references: [id])

  child PhysicalProductCategory[] @relation("PhysicalProductCategory_parent")

  productDrafts    ProductDraftPhysical[]
  productSnapshots ProductSnapshotPhysical[]
  products         ProductPhysical[]
}

model DigitalProductCategory {
  id         Int  @id @default(autoincrement())
  parentId   Int?
  documentId Int  @unique

  parent   DigitalProductCategory? @relation("DigitalProductCategory_parent", fields: [parentId], references: [id])
  document Document                @relation(fields: [documentId], references: [id])

  child DigitalProductCategory[] @relation("DigitalProductCategory_parent")

  productDrafts    ProductDraftDigital[]
  productSnapshots ProductSnapshotDigital[]
  products         ProductDigital[]
}

enum SubjectType {
  PRODUCT_COMMENT
  MEMBER_COMMENT
  USER_RELATION
  PRODUCT_DRAFT
  PRODUCT_INQUIRY
  BEBMER_REPORT
  RETURN
}

model Subject {
  id        Int         @id @default(autoincrement())
  type      SubjectType
  createdAt DateTime    @default(now())

  productId        Int? @unique
  memberId         Int? @unique
  userRelationId   Int? @unique
  productDraftId   Int? @unique
  productInquiryId Int? @unique
  memberReportId   Int? @unique
  returnId         Int? @unique

  product        Product?        @relation(fields: [productId], references: [id])
  member         Member?         @relation(fields: [memberId], references: [id])
  userRelation   UserRelation?   @relation(fields: [userRelationId], references: [id])
  productDraft   ProductDraft?   @relation(fields: [productDraftId], references: [id])
  productInquiry ProductInquiry? @relation(fields: [productInquiryId], references: [id])
  memberReport   MemberReport?   @relation(fields: [memberReportId], references: [id])
  return         Return?         @relation(fields: [returnId], references: [id])

  documents SubjectDocument[]
}

model SubjectDocument {
  id         Int @id @default(autoincrement())
  parentId   Int
  documentId Int @unique

  parent   Subject  @relation(fields: [parentId], references: [id])
  document Document @relation(fields: [documentId], references: [id])
}

model ProductInquiry {
  id            Int       @id @default(autoincrement())
  fromId        Int
  toId          Int
  toAdmin       Boolean // true if report, false if inquiry
  createdAt     DateTime  @default(now())
  clossedAt     DateTime? // never close if id is unique
  isClosedCache Boolean // !!closedAt

  super Subject?

  user    User    @relation(fields: [fromId], references: [id])
  product Product @relation(fields: [toId], references: [id])

  @@index([fromId, createdAt])
  @@index([fromId, isClosedCache, createdAt])
  @@index([toAdmin, toId, createdAt])
  @@index([toAdmin, toId, isClosedCache, createdAt])
}

model MemberReport {
  id            Int       @id @default(autoincrement())
  fromId        Int
  toId          Int
  createdAt     DateTime  @default(now())
  clossedAt     DateTime? // never close if id is unique
  isClosedCache Boolean // !!closedAt

  super Subject?

  from User   @relation(fields: [fromId], references: [id])
  to   Member @relation(fields: [toId], references: [id])

  @@index([fromId, createdAt])
  @@index([fromId, isClosedCache, createdAt])
}

model Return {
  id                  Int       @id @default(autoincrement())
  userInventoryItemId Int       @unique
  createdAt           DateTime  @default(now())
  transactionId       Int?      @unique
  fulfilledAt         DateTime?
  isFulfilledCache    Boolean // !!fulfilledAt
  isAcceptedCache     Boolean // !!transaction
  userIdCache         Int // userInventoryItem::userId
  priceCache          Int // userInventoryItem::transaction::pricePerCountSnapshot

  userInventoryItem UserInventoryItem  @relation(fields: [userInventoryItemId], references: [id])
  transaction       TransactionRefund? @relation(fields: [transactionId], references: [id])
  user              User               @relation(fields: [userIdCache], references: [id])

  details Subject?

  @@index([userIdCache, isFulfilledCache, createdAt])
  @@index([userIdCache, isFulfilledCache, fulfilledAt])
  @@index([userIdCache, isFulfilledCache, isAcceptedCache, fulfilledAt])
}

model CartItem {
  id        Int         @id @default(autoincrement())
  type      ProductType
  userId    Int
  createdAt DateTime    @default(now())

  physicalId      Int? @unique
  physicalAddonId Int? @unique
  digitalId       Int? @unique

  user User @relation(fields: [userId], references: [id])

  physical      CartItemPhysical?      @relation(fields: [physicalId], references: [id])
  physicalAddon CartItemPhysicalAddon? @relation(fields: [physicalId], references: [id])
  digital       CartItemDigital?       @relation(fields: [digitalId], references: [id])

  @@index([userId, createdAt])
}

model CartItemPhysical {
  id             Int      @id @default(autoincrement())
  count          Int
  productId      Int
  userIdCache    Int // super::userId
  createdAtCache DateTime // super::createdAt

  super CartItem?

  product ProductPhysical @relation(fields: [productId], references: [id])

  selectItems CartItemPhysicalSelectItem[]
  options     CartItemPhysicalOption[]

  @@index([userIdCache, productId, createdAtCache])
}

model CartItemPhysicalSelectItem {
  id       Int @id @default(autoincrement())
  parentId Int
  itemId   Int

  parent CartItemPhysical @relation(fields: [parentId], references: [id])

  item ProductPhysicalSelectItem @relation(fields: [itemId], references: [id])
}

model CartItemPhysicalOption {
  id        Int    @id @default(autoincrement())
  parentId  Int
  optionId  Int
  valueJson String

  parent CartItemPhysical @relation(fields: [parentId], references: [id])

  option ProductPhysicalOption @relation(fields: [optionId], references: [id])
}

model CartItemPhysicalAddon {
  id      Int @id @default(autoincrement())
  count   Int
  addonId Int

  super CartItem?

  addon ProductPhysicalAddon @relation(fields: [addonId], references: [id])
}

model CartItemDigital {
  id             Int      @id @default(autoincrement())
  count          Int
  itemId         Int
  userIdCache    Int // super::userId
  createdAtCache DateTime // super::createdAt
  productIdCache Int // item::parentId

  super CartItem?

  item    ProductDigitalItem @relation(fields: [itemId], references: [id])
  product ProductDigital     @relation(fields: [productIdCache], references: [id])

  @@index([userIdCache, productIdCache, createdAtCache])
}

enum WishlistItemType {
  PHYSICAL
  DIGITAL
}

model WishlistItem {
  id        Int              @id @default(autoincrement())
  type      WishlistItemType
  userId    Int
  createdAt DateTime         @default(now())

  physicalId Int? @unique
  digitalId  Int? @unique

  user User @relation(fields: [userId], references: [id])

  physical WishlistItemPhysical? @relation(fields: [physicalId], references: [id])
  digital  WishlistItemDigital?  @relation(fields: [digitalId], references: [id])

  @@index([userId, createdAt])
}

model WishlistItemPhysical {
  id          Int @id @default(autoincrement())
  productId   Int
  userIdCache Int // super::userId

  super WishlistItem?

  product ProductPhysical @relation(fields: [productId], references: [id])

  addons      WishlistItemPhysicalAddon[]
  selectItems WishlistItemPhysicalSelectItem[]
  options     WishlistItemPhysicalOption[]

  @@unique([userIdCache, productId])
}

model WishlistItemPhysicalAddon {
  id          Int @id @default(autoincrement())
  parentId    Int
  userIdCache Int // super::userId
  addonId     Int
  count       Int

  parent WishlistItemPhysical @relation(fields: [parentId], references: [id])
  addon  ProductPhysicalAddon @relation(fields: [addonId], references: [id])

  @@unique([userIdCache, addonId])
}

model WishlistItemPhysicalSelectItem {
  id           Int @id @default(autoincrement())
  parentId     Int
  userIdCache  Int // super::userId
  selectId     Int
  selectItemId Int

  parent     WishlistItemPhysical      @relation(fields: [parentId], references: [id])
  select     ProductPhysicalSelect     @relation(fields: [selectId], references: [id])
  selectItem ProductPhysicalSelectItem @relation(fields: [selectItemId], references: [id])

  @@unique([userIdCache, selectId])
}

model WishlistItemPhysicalOption {
  id          Int @id @default(autoincrement())
  parentId    Int
  userIdCache Int // super::userId
  optionId    Int

  parent WishlistItemPhysical  @relation(fields: [parentId], references: [id])
  option ProductPhysicalOption @relation(fields: [optionId], references: [id])

  @@unique([userIdCache, optionId])
}

model WishlistItemDigital {
  id          Int @id @default(autoincrement())
  productId   Int
  userIdCache Int // super::userId

  super WishlistItem?

  product ProductDigital @relation(fields: [productId], references: [id])

  @@unique([userIdCache, productId])
}
