enum UserRole {
  NONE
  SELLER
  SUPER_SELLER
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  role      UserRole
  createdAt DateTime @default(now())

  // Separating User and UserProfile/UserAuthentication/... models to maintain a manageable size for the User model
  profileId        Int @unique
  authenticationId Int @unique

  // relationships
  relationsSmaller          UserRelation[]              @relation("UserRelation_smaller")
  relationsBigger           UserRelation[]              @relation("UserRelation_bigger")
  relationCacheFrom         UserRelationCacheByUser[]   @relation("UserRelationCacheByUser_from")
  relationCacheTo           UserRelationCacheByUser[]   @relation("UserRelationCacheByUser_to")
  relationFriendRequestFrom UserRelationFriendRequest[] @relation("UserRelationFriendRequest_from")
  relationFriendRequestTo   UserRelationFriendRequest[] @relation("UserRelationFriendRequest_to")
  following                 UserFollow[]                @relation("UserFollow_from")
  followed                  UserFollow[]                @relation("UserFollow_to")

  // other 1:n
  passwordHistory           UserPasswordHistory[]
  email                     UserEmail[]
  actor                     Actor?
  ownedGroups               Group[]
  groups                    GroupMember[]
  articleEditHistory        ArticleEditHistory[]
  userPasswordResetRequests UserPasswordResetRequest[]
  transactions              Transaction[]
  inventoryItems            UserInventoryItem[]
  publicFiles               PublicFile[]
  privateFiles              PrivateFile[]
  inquiries                 ProductInquiry[]
  userInquiries_from        UserInquiry[]              @relation("UserInquiry_from")
  userInquiries_to          UserInquiry[]              @relation("UserInquiry_to")

  // 1:1
  profile        UserProfile        @relation(fields: [profileId], references: [id])
  authentication UserAuthentication @relation(fields: [authenticationId], references: [id])
}

model UserRelation {
  id            Int      @id @default(autoincrement())
  userIdSmaller Int
  userIdBigger  Int
  createdAt     DateTime @default(now())

  smaller User @relation("UserRelation_smaller", fields: [userIdSmaller], references: [id])
  bigger  User @relation("UserRelation_bigger", fields: [userIdBigger], references: [id])

  byUser UserRelationCacheByUser[]
  chat   Subject?
}

model UserRelationCacheByUser {
  // 2 rows for each UserRelation row
  fromId Int
  toId   Int

  relationId Int

  isFriend       Boolean  @default(true)
  createdAtCache DateTime // from UserRelation::createdAt

  from     User         @relation("UserRelationCacheByUser_from", fields: [fromId], references: [id])
  to       User         @relation("UserRelationCacheByUser_to", fields: [toId], references: [id])
  relation UserRelation @relation(fields: [relationId], references: [id])

  @@id([fromId, toId])
  @@index([fromId, isFriend, createdAtCache])
}

model UserRelationFriendRequest {
  fromId           Int
  toId             Int
  articleId        Int      @unique
  createdAt        DateTime @default(now())
  isCancelled      Boolean
  isRejected       Boolean
  isAvailableCache Boolean // !isCancelled && !isRejected

  from    User    @relation("UserRelationFriendRequest_from", fields: [fromId], references: [id])
  to      User    @relation("UserRelationFriendRequest_to", fields: [toId], references: [id])
  article Article @relation(fields: [articleId], references: [id])

  @@id([fromId, toId])
  @@index([fromId, createdAt])
  @@index([toId, createdAt])
  @@index([fromId, isAvailableCache, createdAt])
  @@index([toId, isAvailableCache, createdAt])
}

model UserFollow {
  fromId    Int
  toId      Int
  createdAt DateTime @default(now())

  from User @relation("UserFollow_from", fields: [fromId], references: [id])
  to   User @relation("UserFollow_to", fields: [toId], references: [id])

  @@id([fromId, toId])
  @@index([fromId, createdAt])
  @@index([toId, createdAt])
}

model UserAuthentication {
  id           Int    @id @default(autoincrement())
  passwordHash String // hash(userId, password)

  user         User?
  oauth        OAuth[]
  loginHistory UserLoginHistory[]
}

enum OAuthProvider {
  NAVER
  KAKAO
}

model OAuth {
  id       Int           @id @default(autoincrement())
  provider OAuthProvider
  oauthId  String
  userId   Int?

  user         UserAuthentication? @relation(fields: [userId], references: [id])
  loginHistory UserLoginHistory[]

  @@unique([provider, oauthId])
}

model UserPasswordResetRequest {
  userId       Int
  email        String
  createdAt    DateTime
  expiresAt    DateTime
  passwordHash String
  resetAt      DateTime?
  cancelledAt  DateTime?
  isValidCache Boolean // resetAt === null && cancelledAt === null

  user User @relation(fields: [userId], references: [id])

  @@id([userId, createdAt])
  @@index([userId, isValidCache, createdAt])
}

model UserLoginHistory {
  userAuthenticationId Int
  createdAt            DateTime @default(now())
  ipAddress            String
  oauthId              Int?

  userAuthentication UserAuthentication @relation(fields: [userAuthenticationId], references: [id])
  oauth              OAuth?             @relation(fields: [oauthId], references: [id])

  @@id([userAuthenticationId, createdAt])
}

model UserProfile {
  id             Int    @id @default(autoincrement())
  nickname       String @unique
  introductionId Int?   @unique
  profileImageId Int?

  User         User?
  introduction Article?    @relation(fields: [introductionId], references: [id])
  profileImage PublicFile? @relation(fields: [profileImageId], references: [id])
}

model UserPasswordHistory {
  // To prevent user set password previously used
  userId       Int
  passwordHash String // hash(userId, password)

  user User @relation(fields: [userId], references: [id])

  @@id([userId, passwordHash])
}

model UserEmail {
  email        String   @id
  userId       Int?
  blockedCache Boolean // true if userId is null
  createdAt    DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@index([blockedCache, email])
}

model Group {
  id             Int    @id @default(autoincrement())
  name           String @unique
  introductionId Int?   @unique
  profileImageId Int?

  ownerId Int

  owner        User            @relation(fields: [ownerId], references: [id])
  members      GroupMember[]
  actor        Actor?
  auditLog     GroupAuditLog[]
  introduction Article?        @relation(fields: [introductionId], references: [id])
  profileImage PublicFile?     @relation(fields: [profileImageId], references: [id])
}

model GroupMember {
  groupId Int
  userId  Int

  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@id([groupId, userId])
}

model GroupAuditLog {
  id        Int      @id @default(autoincrement())
  groupId   Int
  createdAt DateTime @default(now())
  logType   Int
  logJson   String

  group Group @relation(fields: [groupId], references: [id])

  @@index([groupId, createdAt])
  @@index([groupId, logType, createdAt])
}

enum ActorType {
  USER
  GROUP
}

model Actor {
  id   Int       @id @default(autoincrement())
  type ActorType

  userId  Int? @unique // null if system
  groupId Int? @unique // null if not as group member

  user  User?  @relation(fields: [userId], references: [id])
  group Group? @relation(fields: [groupId], references: [id])

  ownedFiles                PublicFile[]
  ownedArticles             Article[]
  editedArticles            ArticleEditHistory[]
  ownedProducts             Product[]
  ownedDigitalProductSeries DigitalProductSeries[]
  ownedProductDrafts        ProductDraft[]
}

model PublicFile {
  // When upload:
  // 1. create File with referenceCount = 0
  // 2. upload to its ObjectStorage
  // 3. reference File and increase referenceCount at once
  // When collect garbage: delete rows with zero-referenceCount and old enough
  id             Int      @id @default(autoincrement())
  name           String
  providerAndId  String
  referenceCount Int
  ownerId        Int
  uploadedUserId Int
  markAsDeleted  Boolean
  createdAt      DateTime @default(now())

  owner        Actor @relation(fields: [ownerId], references: [id])
  uploadedUser User  @relation(fields: [uploadedUserId], references: [id])

  userProfiles  UserProfile[]
  groupProfiles Group[]
  articles      ArticleEditHistoryFile[]

  @@index([referenceCount, createdAt])
}

model PrivateFile {
  // Similar to PublicFile, but for digital product content only.
  id                Int      @id @default(autoincrement())
  name              String
  providerAndId     String
  markAsDeleted     Boolean
  createdAt         DateTime @default(now())
  productDraftId    Int
  productSnapshotId Int?
  productId         Int?
  uploadedUserId    Int

  productDraft    DigitalProductDraft     @relation(fields: [productDraftId], references: [id])
  productSnapshot DigitalProductSnapshot? @relation(fields: [productId], references: [id])
  product         DigitalProduct?         @relation(fields: [productId], references: [id])
  User            User                    @relation(fields: [uploadedUserId], references: [id])
}

model Article {
  id            Int      @id @default(autoincrement())
  ownerId       Int? // null if no actor has write permission
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastTimeCache DateTime @unique // SELECT MAX(createdAt) FROM ArticleEditHistory WHERE articleId = ${id}

  owner       Actor?             @relation(fields: [ownerId], references: [id])
  lastVersion ArticleEditHistory @relation(fields: [id, createdAt], references: [articleId, createdAt])

  userProfileIntroduction                  UserProfile?
  userRelationFriendRequest                UserRelationFriendRequest?
  groupIntroduction                        Group?
  review                                   Review?
  productDescription                       Product?
  physicalProductAddonDetails              PhysicalProductAddon?
  physicalProductSelectDetails             PhysicalProductSelect?
  physicalProductSelectItemDetails         PhysicalProductSelectItem?
  physicalProductOptionDetails             PhysicalProductOption?
  digitalProductItemDetails                DigitalProductItem?
  productDraftDescription                  ProductDraft?
  physicalProductAddonDraftDetails         PhysicalProductAddonDraft?
  physicalProductSelectDraftDetails        PhysicalProductSelectDraft?
  physicalProductSelectItemDraftDetails    PhysicalProductSelectItemDraft?
  physicalProductOptionDraftDetails        PhysicalProductOptionDraft?
  digitalProductItemDraftDetails           DigitalProductItemDraft?
  productSnapshotDescription               ProductSnapshot?
  physicalProductAddonSnapshotDetails      PhysicalProductAddonSnapshot?
  physicalProductSelectSnapshotDetails     PhysicalProductSelectSnapshot?
  physicalProductSelectItemSnapshotDetails PhysicalProductSelectItemSnapshot?
  physicalProductOptionSnapshotSnapshot    PhysicalProductOptionSnapshot?
  digitalProductItemSnapshotDetails        DigitalProductItemSnapshot?
  subjectArticle                           SubjectArticle?
  physicalProductCategory                  PhysicalProductCategory?
  digitalProductCategory                   DigitalProductCategory?

  @@unique([id, createdAt])
}

model ArticleEditHistory {
  articleId     Int
  createdAt     DateTime @default(now())
  title         String?
  messageBbcode String
  actorId       Int
  userId        Int

  files   ArticleEditHistoryFile[]
  actor   Actor                    @relation(fields: [actorId], references: [id])
  user    User                     @relation(fields: [userId], references: [id])
  Article Article?

  @@id([articleId, createdAt])
}

model ArticleEditHistoryFile {
  articleEditHistoryId Int
  fileId               Int
  createdAt            DateTime @default(now())

  article ArticleEditHistory @relation(fields: [articleEditHistoryId, createdAt], references: [articleId, createdAt])
  file    PublicFile         @relation(fields: [fileId], references: [id])

  @@id([articleEditHistoryId, fileId])
}

enum ProductType {
  PYHSICAL
  DIGITAL
}

model Product {
  id                Int         @id @default(autoincrement())
  type              ProductType
  descriptionId     Int         @unique
  ownerIdCache      Int // from ProductDraft::ownerId
  visibilityByOwner Boolean
  visibilityByAdmin Boolean
  visibilityCache   Boolean // visibilityByOwner && visibilityByAdmin

  physicalProductId Int? @unique
  digitalProductId  Int? @unique

  ownerCache  Actor   @relation(fields: [ownerIdCache], references: [id])
  description Article @relation(fields: [descriptionId], references: [id])

  physicalProduct PhysicalProduct? @relation(fields: [physicalProductId], references: [id])
  digitalProduct  DigitalProduct?  @relation(fields: [digitalProductId], references: [id])

  reviews   Review[]
  comment   Subject?
  inquiries ProductInquiry[]

  draft ProductDraft?
}

model PhysicalProduct {
  // user can buy same physical product multiple times
  id            Int  @id @default(autoincrement())
  price         Int
  categoryId    Int
  stockQuantity Int?
  quantityLimit Int?

  parent Product?

  category PhysicalProductCategory @relation(fields: [categoryId], references: [id])

  addons            PhysicalProductAddon[]
  selects           PhysicalProductSelect[]
  options           PhysicalProductOption[]
  transactions      TransactionBuyItemPhysicalItem[]
  userInventoryItem UserInventoryItemOriginal[]

  draft PhysicalProductDraft?
}

model PhysicalProductAddon {
  id                  Int     @id @default(autoincrement())
  parentId            Int
  price               Int
  enabled             Boolean
  stockQuantity       Int?
  quantityLimit       Int?
  allowedCountPerItem Int?
  name                String
  detailsId           Int?    @unique

  parent PhysicalProduct @relation(fields: [parentId], references: [id])

  details Article? @relation(fields: [detailsId], references: [id])

  transactions      TransactionBuyItemPhysicalItem[]
  userInventoryItem UserInventoryItemAddon[]

  draft PhysicalProductAddonDraft?
}

model PhysicalProductSelect {
  id            Int     @id @default(autoincrement())
  parentId      Int
  enabled       Boolean
  name          String
  detailsId     Int?    @unique
  defaultItemId Int?    @unique

  parent PhysicalProduct @relation(fields: [parentId], references: [id])

  details     Article?                    @relation(fields: [detailsId], references: [id])
  defaultItem PhysicalProductSelectItem?  @relation("PhysicalProductSelect_defaultItem", fields: [defaultItemId], references: [id])
  items       PhysicalProductSelectItem[] @relation("PhysicalProductSelectItem_parent")

  draft PhysicalProductSelectDraft?

  @@index([parentId, enabled, name])
}

model PhysicalProductSelectItem {
  id              Int     @id @default(autoincrement())
  parentId        Int
  additionalPrice Int
  enabled         Boolean
  name            String
  detailsId       Int?    @unique

  parent PhysicalProductSelect @relation("PhysicalProductSelectItem_parent", fields: [parentId], references: [id])

  default PhysicalProductSelect? @relation("PhysicalProductSelect_defaultItem")
  details Article?               @relation(fields: [detailsId], references: [id])

  transactions      TransactionBuyItemPhysicalItem[]
  userInventoryItem UserInventoryItemOriginalSelectItem[]

  draft PhysicalProductSelectItemDraft?

  @@index([parentId, enabled, name])
}

model PhysicalProductOption {
  id              Int     @id @default(autoincrement())
  parentId        Int
  additionalPrice Int
  enabled         Boolean
  name            String
  detailsId       Int?    @unique
  valueTypeJson   String

  parent PhysicalProduct @relation(fields: [parentId], references: [id])

  details Article? @relation(fields: [detailsId], references: [id])

  transactions      TransactionBuyItemPhysicalItem[]
  userInventoryItem UserInventoryItemOriginalOption[]

  draft PhysicalProductOptionDraft?
}

model DigitalProduct {
  // user can buy same digital product multiple times to extend validity
  id           Int    @id @default(autoincrement())
  metadataJson String
  categoryId   Int
  seriesId     Int?

  parent Product?

  category DigitalProductCategory @relation(fields: [categoryId], references: [id])
  series   DigitalProductSeries?  @relation(fields: [seriesId], references: [id])

  items DigitalProductItem[]
  files PrivateFile[]

  draft DigitalProductDraft?
}

model DigitalProductItem {
  id               Int     @id @default(autoincrement())
  parentId         Int
  price            Int
  name             String?
  detailsId        Int?    @unique
  stockQuantity    Int?
  validityDuration Int? // how long user can view the content, null if infinity

  parent  DigitalProduct @relation(fields: [parentId], references: [id])
  details Article?       @relation(fields: [detailsId], references: [id])

  transactions TransactionBuyItemDigital[]

  draft DigitalProductItemDraft?

  @@unique([parentId, validityDuration])
}

model DigitalProductSeries {
  id      Int    @id @default(autoincrement())
  name    String @unique
  ownerId Int

  owner Actor            @relation(fields: [ownerId], references: [id])
  items DigitalProduct[]
}

model Review {
  id             Int @id @default(autoincrement())
  articleId      Int @unique
  productIdCache Int // from TransactionBuyItem::parent::parent::id

  transaction TransactionBuyItem?
  product     Product             @relation(fields: [productIdCache], references: [id])
  article     Article             @relation(fields: [articleId], references: [id])
}

model ProductDraft {
  id                Int         @id @default(autoincrement())
  type              ProductType
  descriptionId     Int         @unique
  ownerId           Int
  reviewRequestedAt DateTime?

  physicalProductDraftId Int? @unique
  digitalProductDraftId  Int? @unique

  publishedId Int? @unique

  owner       Actor   @relation(fields: [ownerId], references: [id])
  description Article @relation(fields: [descriptionId], references: [id])

  physicalProductDraft PhysicalProductDraft? @relation(fields: [physicalProductDraftId], references: [id])
  digitalProductDraft  DigitalProductDraft?  @relation(fields: [digitalProductDraftId], references: [id])

  published Product? @relation(fields: [publishedId], references: [id])
  inquiry   Subject?

  @@index([reviewRequestedAt])
}

model PhysicalProductDraft {
  id            Int  @id @default(autoincrement())
  price         Int
  quantityLimit Int?
  categoryId    Int?

  publishedId Int @unique

  parent ProductDraft?

  category PhysicalProductCategory? @relation(fields: [categoryId], references: [id])

  addons  PhysicalProductAddonDraft[]
  selects PhysicalProductSelectDraft[]
  options PhysicalProductOptionDraft[]

  published PhysicalProduct? @relation(fields: [publishedId], references: [id])
}

model PhysicalProductAddonDraft {
  id                  Int     @id @default(autoincrement())
  parentId            Int
  price               Int
  enabled             Boolean
  allowedCountPerItem Int?
  name                String
  detailsId           Int?    @unique

  publishedId Int? @unique

  parent  PhysicalProductDraft @relation(fields: [parentId], references: [id])
  details Article?             @relation(fields: [detailsId], references: [id])

  published PhysicalProductAddon? @relation(fields: [publishedId], references: [id])
}

model PhysicalProductSelectDraft {
  id            Int    @id @default(autoincrement())
  parentId      Int
  name          String
  detailsId     Int?   @unique
  defaultItemId Int?   @unique

  publishedId Int @unique

  parent      PhysicalProductDraft             @relation(fields: [parentId], references: [id])
  details     Article?                         @relation(fields: [detailsId], references: [id])
  defaultItem PhysicalProductSelectItemDraft?  @relation("PhysicalProductSelect_defaultItem", fields: [defaultItemId], references: [id])
  items       PhysicalProductSelectItemDraft[] @relation("PhysicalProductSelectItem_parent")

  published PhysicalProductSelect? @relation(fields: [publishedId], references: [id])
}

model PhysicalProductSelectItemDraft {
  id              Int     @id @default(autoincrement())
  parentId        Int
  additionalPrice Int
  enabled         Boolean
  name            String
  detailsId       Int?    @unique

  publishedId Int? @unique

  parent  PhysicalProductSelectDraft  @relation("PhysicalProductSelectItem_parent", fields: [parentId], references: [id])
  default PhysicalProductSelectDraft? @relation("PhysicalProductSelect_defaultItem")
  details Article?                    @relation(fields: [detailsId], references: [id])

  published PhysicalProductSelectItem? @relation(fields: [publishedId], references: [id])

  @@index([parentId, enabled, name])
}

model PhysicalProductOptionDraft {
  id              Int     @id @default(autoincrement())
  parentId        Int
  additionalPrice Int
  enabled         Boolean
  name            String
  detailsId       Int?    @unique
  valueTypeJson   String

  publishedId Int? @unique

  parent  PhysicalProductDraft @relation(fields: [parentId], references: [id])
  details Article?             @relation(fields: [detailsId], references: [id])

  published PhysicalProductOption? @relation(fields: [publishedId], references: [id])
}

model DigitalProductDraft {
  id           Int    @id @default(autoincrement())
  metadataJson String
  categoryId   Int?

  publishedId Int? @unique

  parent ProductDraft?

  category DigitalProductCategory? @relation(fields: [categoryId], references: [id])

  items DigitalProductItemDraft[]
  files PrivateFile[]

  published DigitalProduct? @relation(fields: [publishedId], references: [id])
}

model DigitalProductItemDraft {
  id               Int     @id @default(autoincrement())
  parentId         Int
  price            Int
  enabled          Boolean
  name             String?
  detailsId        Int?    @unique
  validityDuration Int? // how long user can view the content, null if infinity

  publishedId Int? @unique

  parent  DigitalProductDraft @relation(fields: [parentId], references: [id])
  details Article?            @relation(fields: [detailsId], references: [id])

  published DigitalProductItem? @relation(fields: [publishedId], references: [id])
}

model ProductSnapshot {
  id            Int         @id @default(autoincrement())
  type          ProductType
  descriptionId Int         @unique

  physicalProductId Int? @unique
  digitalProductId  Int? @unique

  description Article @relation(fields: [descriptionId], references: [id])

  physicalProduct PhysicalProductSnapshot? @relation(fields: [physicalProductId], references: [id])
  digitalProduct  DigitalProductSnapshot?  @relation(fields: [digitalProductId], references: [id])
}

model PhysicalProductSnapshot {
  id            Int  @id @default(autoincrement())
  price         Int
  quantityLimit Int?
  categoryId    Int

  parent ProductSnapshot?

  category PhysicalProductCategory @relation(fields: [categoryId], references: [id])

  addons  PhysicalProductAddonSnapshot[]
  selects PhysicalProductSelectSnapshot[]
  options PhysicalProductOptionSnapshot[]
}

model PhysicalProductAddonSnapshot {
  id                  Int    @id @default(autoincrement())
  parentId            Int
  price               Int
  quantityLimit       Int?
  allowedCountPerItem Int?
  name                String
  detailsId           Int?   @unique

  parent  PhysicalProductSnapshot @relation(fields: [parentId], references: [id])
  details Article?                @relation(fields: [detailsId], references: [id])
}

model PhysicalProductSelectSnapshot {
  id            Int     @id @default(autoincrement())
  parentId      Int
  enabled       Boolean
  name          String
  detailsId     Int?    @unique
  defaultItemId Int?    @unique

  parent  PhysicalProductSnapshot @relation(fields: [parentId], references: [id])
  details Article?                @relation(fields: [detailsId], references: [id])

  defaultItem PhysicalProductSelectItemSnapshot?  @relation("PhysicalProductSelectSnapshot_defaultItem", fields: [defaultItemId], references: [id])
  items       PhysicalProductSelectItemSnapshot[] @relation("PhysicalProductSelectItemSnapshot_parent")
}

model PhysicalProductSelectItemSnapshot {
  id              Int     @id @default(autoincrement())
  parentId        Int
  additionalPrice Int
  enabled         Boolean
  name            String
  detailsId       Int?    @unique

  parent PhysicalProductSelectSnapshot @relation("PhysicalProductSelectItemSnapshot_parent", fields: [parentId], references: [id])

  default PhysicalProductSelectSnapshot? @relation("PhysicalProductSelectSnapshot_defaultItem")
  details Article?                       @relation(fields: [detailsId], references: [id])
}

model PhysicalProductOptionSnapshot {
  id              Int     @id @default(autoincrement())
  parentId        Int
  additionalPrice Int
  enabled         Boolean
  name            String
  detailsId       Int?    @unique
  valueTypeJson   String

  parent PhysicalProductSnapshot @relation(fields: [parentId], references: [id])

  details Article? @relation(fields: [detailsId], references: [id])
}

model DigitalProductSnapshot {
  id           Int    @id @default(autoincrement())
  metadataJson String
  categoryId   Int

  parent ProductSnapshot?

  category DigitalProductCategory @relation(fields: [categoryId], references: [id])

  items DigitalProductItemSnapshot[]
  files PrivateFile[]
}

model DigitalProductItemSnapshot {
  id               Int     @id @default(autoincrement())
  parentId         Int
  price            Int
  name             String?
  detailsId        Int?    @unique
  validityDuration Int? // how long user can view the content, null if infinity

  parent  DigitalProductSnapshot @relation(fields: [parentId], references: [id])
  details Article?               @relation(fields: [detailsId], references: [id])
}

enum UserInventoryItemType {
  ORIGINAL
  ADDON
}

model UserInventoryItem {
  id            Int                   @id @default(autoincrement())
  type          UserInventoryItemType
  userId        Int
  created_at    DateTime              @default(now())
  memo          String?
  nameCache     String // memo ?? (concrete)::product::name
  transactionId Int
  used_at       DateTime?

  originalId Int? @unique
  addonId    Int? @unique

  original UserInventoryItemOriginal? @relation(fields: [originalId], references: [id])
  addon    UserInventoryItemAddon?    @relation(fields: [addonId], references: [id])

  user        User                           @relation(fields: [userId], references: [id])
  transaction TransactionBuyItemPhysicalItem @relation(fields: [transactionId], references: [id])

  @@index([userId, created_at])
}

model UserInventoryItemOriginal {
  id     Int @id @default(autoincrement())
  itemId Int

  parent      UserInventoryItem?
  item        PhysicalProduct                       @relation(fields: [itemId], references: [id])
  selectItems UserInventoryItemOriginalSelectItem[]
  options     UserInventoryItemOriginalOption[]
}

model UserInventoryItemOriginalSelectItem {
  id        Int @id @default(autoincrement())
  parentId  Int
  productId Int

  parent  UserInventoryItemOriginal @relation(fields: [parentId], references: [id])
  product PhysicalProductSelectItem @relation(fields: [productId], references: [id])
}

model UserInventoryItemOriginalOption {
  id        Int    @id @default(autoincrement())
  parentId  Int
  productId Int
  valueJson String

  parent  UserInventoryItemOriginal @relation(fields: [parentId], references: [id])
  product PhysicalProductOption     @relation(fields: [productId], references: [id])
}

model UserInventoryItemAddon {
  id     Int @id @default(autoincrement())
  itemId Int

  parent UserInventoryItem?
  item   PhysicalProductAddon @relation(fields: [itemId], references: [id])
}

model UserDigitalProduct {
  id        Int       @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  items UserDigitalProductItem[]
}

model UserDigitalProductItem {
  userDigitalProductId Int
  createdAt            DateTime  @default(now())
  transactionId        Int       @unique
  startAt              DateTime?

  userDigitalProduct UserDigitalProduct        @relation(fields: [userDigitalProductId], references: [id])
  transaction        TransactionBuyItemDigital @relation(fields: [transactionId], references: [id])

  @@id([userDigitalProductId, createdAt])
}

enum TransactionType {
  CHARGE_CREDIT
  BUY
  REFUND
  SETTLE_SALES
  CASH_OUT_CREDIT
}

model Transaction {
  id                   Int             @id @default(autoincrement())
  type                 TransactionType
  userId               Int
  createdAt            DateTime        @default(now())
  userCreditBefore     Int
  userCreditAfterCache Int

  buyId           Int? @unique
  chargeCreditId  Int? @unique
  refundId        Int? @unique
  settleSalesId   Int? @unique
  cashOutCreditId Int? @unique

  user User @relation(fields: [userId], references: [id])

  buy           TransactionBuy?           @relation(fields: [buyId], references: [id])
  chargeCredit  TransactionChargeCredit?  @relation(fields: [chargeCreditId], references: [id])
  refund        TransactionRefund?        @relation(fields: [refundId], references: [id])
  settleSales   TransactionSettleSales?   @relation(fields: [settleSalesId], references: [id])
  cashOutCredit TransactionCashOutCredit? @relation(fields: [cashOutCreditId], references: [id])

  @@index([userId, createdAt])
  @@index([userId, type, createdAt])
}

model TransactionChargeCredit {
  id          Int @id @default(autoincrement())
  creditCount Int

  transaction Transaction?
}

model TransactionBuy {
  id                    Int                  @id @default(autoincrement())
  items                 TransactionBuyItem[]
  priceSumCacheSnapshot Int
  refundedCredit        Int

  parent Transaction?
}

enum TransactionBuyItemType {
  PYHSICAL
  DIGITAL
}

model TransactionBuyItem {
  id                    Int                    @id @default(autoincrement())
  parentId              Int
  priceSumCacheSnapshot Int
  reviewId              Int?                   @unique
  type                  TransactionBuyItemType

  physicalId Int? @unique
  digitalId  Int? @unique

  physical TransactionBuyItemPhysical? @relation(fields: [physicalId], references: [id])
  digital  TransactionBuyItemDigital?  @relation(fields: [physicalId], references: [id])

  parent TransactionBuy @relation(fields: [parentId], references: [id])

  review Review? @relation(fields: [reviewId], references: [id])

  refundTransactions TransactionRefund[]
  settleSalesItem    TransactionSettleSalesItem?
}

model TransactionBuyItemPhysical {
  id Int @id @default(autoincrement())

  parent TransactionBuyItem?
  items  TransactionBuyItemPhysicalItem[]
}

enum TransactionBuyItemPhysicalItemType {
  ORIGINAL
  ADDON
  SELECT_ITEM
  OPTION
}

model TransactionBuyItemPhysicalItem {
  id                     Int                                @id @default(autoincrement())
  parentId               Int
  type                   TransactionBuyItemPhysicalItemType
  pricePerCountSnapshot  Int
  count                  Int
  refundedCount          Int
  valueJson              String? // required on option
  confirmedAt            DateTime?
  confirmedAutomatically Boolean                            @default(false)

  originalId   Int?
  addonId      Int?
  selectItemId Int?
  optionId     Int?

  parent TransactionBuyItemPhysical @relation(fields: [parentId], references: [id])

  original   PhysicalProduct?           @relation(fields: [originalId], references: [id])
  addon      PhysicalProductAddon?      @relation(fields: [addonId], references: [id])
  selectItem PhysicalProductSelectItem? @relation(fields: [selectItemId], references: [id])
  option     PhysicalProductOption?     @relation(fields: [optionId], references: [id])

  userInventoryItem UserInventoryItem[]
}

model TransactionBuyItemDigital {
  id                       Int  @id @default(autoincrement())
  itemId                   Int
  priceSnapshot            Int // from DigitalProductItem::price
  validityDurationSnapshot Int? // from DigitalProductItem::validityDuration

  parent TransactionBuyItem?
  item   DigitalProductItem  @relation(fields: [itemId], references: [id])

  userDigitalProductItem UserDigitalProductItem?
}

model TransactionRefund {
  id             Int      @id @default(autoincrement())
  refundedCredit Int
  refundedAt     DateTime
  remainCredit   Int
  itemId         Int

  parent Transaction?

  item TransactionBuyItem @relation(fields: [itemId], references: [id])
}

model TransactionSettleSales {
  id          Int                          @id @default(autoincrement())
  items       TransactionSettleSalesItem[]
  creditCount Int

  parent Transaction?
}

model TransactionSettleSalesItem {
  id            Int @id @default(autoincrement())
  transactionId Int
  itemId        Int @unique

  parent TransactionSettleSales @relation(fields: [transactionId], references: [id])
  item   TransactionBuyItem     @relation(fields: [itemId], references: [id])
}

model TransactionCashOutCredit {
  id          Int @id @default(autoincrement())
  creditCount Int

  parent Transaction?
}

model PhysicalProductCategory {
  id        Int  @id @default(autoincrement())
  parentId  Int?
  articleId Int  @unique

  parent  PhysicalProductCategory? @relation("PhysicalProductCategory_parent", fields: [parentId], references: [id])
  article Article                  @relation(fields: [articleId], references: [id])

  child PhysicalProductCategory[] @relation("PhysicalProductCategory_parent")

  productDrafts    PhysicalProductDraft[]
  productSnapshots PhysicalProductSnapshot[]
  products         PhysicalProduct[]
}

model DigitalProductCategory {
  id        Int  @id @default(autoincrement())
  parentId  Int?
  articleId Int  @unique

  parent  DigitalProductCategory? @relation("DigitalProductCategory_parent", fields: [parentId], references: [id])
  article Article                 @relation(fields: [articleId], references: [id])

  child DigitalProductCategory[] @relation("DigitalProductCategory_parent")

  productDrafts    DigitalProductDraft[]
  productSnapshots DigitalProductSnapshot[]
  products         DigitalProduct[]
}

enum SubjectType {
  PRODUCT_COMMENT
  USER_RELATION
  PRODUCT_DRAFT
  PRODUCT_INQUIRY
  USER_INQUIRY
}

model Subject {
  id        Int         @id @default(autoincrement())
  type      SubjectType
  createdAt DateTime    @default(now())

  productId        Int? @unique
  userRelationId   Int? @unique
  productDraftId   Int? @unique
  productInquiryId Int? @unique
  userInquiryId    Int? @unique

  product        Product?        @relation(fields: [productId], references: [id])
  userRelation   UserRelation?   @relation(fields: [userRelationId], references: [id])
  productDraft   ProductDraft?   @relation(fields: [productDraftId], references: [id])
  productInquiry ProductInquiry? @relation(fields: [productInquiryId], references: [id])
  userInquiry    UserInquiry?    @relation(fields: [userInquiryId], references: [id])

  articles SubjectArticle[]
}

model SubjectArticle {
  id        Int @id @default(autoincrement())
  parentId  Int
  articleId Int @unique

  parent  Subject @relation(fields: [parentId], references: [id])
  article Article @relation(fields: [articleId], references: [id])
}

model ProductInquiry {
  id            Int       @id @default(autoincrement())
  fromId        Int
  toId          Int
  toAdmin       Boolean
  createdAt     DateTime  @default(now())
  clossedAt     DateTime? // never close if id is unique
  isClosedCache Boolean // !!closedAt

  parent Subject?

  user    User    @relation(fields: [fromId], references: [id])
  product Product @relation(fields: [toId], references: [id])

  @@index([fromId, createdAt])
  @@index([toAdmin, toId, createdAt])
  @@index([fromId, isClosedCache, createdAt])
  @@index([toAdmin, toId, isClosedCache, createdAt])
}

model UserInquiry {
  id            Int       @id @default(autoincrement())
  fromId        Int
  toId          Int
  createdAt     DateTime  @default(now())
  clossedAt     DateTime? // never close if id is unique
  isClosedCache Boolean // !!closedAt

  parent Subject?

  from User @relation("UserInquiry_from", fields: [fromId], references: [id])
  to   User @relation("UserInquiry_to", fields: [toId], references: [id])

  @@index([fromId, createdAt])
  @@index([fromId, isClosedCache, createdAt])
}
